{"version":3,"sources":["pages/Login/login.jsx","pages/Login/register.tsx","pages/Login/index.tsx","assets/bgImg/LoginBgImg5.jpg"],"names":["Login","MyTextInput","label","props","useField","field","meta","htmlFor","id","name","className","touched","error","initialValues","firstName","lastName","email","acceptedTerms","jobType","validationSchema","Yup","max","required","onSubmit","values","setSubmitting","setTimeout","alert","JSON","stringify","type","placeholder","Register","withRouter","useState","isLoginPage","setIsLoginPage","style","background","bgImg5","onClick","console","log","module","exports"],"mappings":"8LA0FeA,MArFf,WACI,IAAMC,EAAc,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAUC,EAAY,2BAGnBC,YAASD,GAHU,mBAGlCE,EAHkC,KAG3BC,EAH2B,KAIzC,OACI,oCACI,2BAAOC,QAASJ,EAAMK,IAAML,EAAMM,MAAOP,GACzC,yCAAOQ,UAAU,cAAiBL,EAAWF,IAC5CG,EAAKK,SAAWL,EAAKM,MAClB,yBAAKF,UAAU,SAASJ,EAAKM,OAC7B,OAuBhB,OACI,kBAAC,IAAD,CACIC,cAAe,CACXC,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,eAAe,EACfC,QAAS,IAEbC,iBAAkBC,IAAW,CACzBN,UAAWM,MACNC,IAAI,GAAI,iCACRC,SAAS,YACdP,SAAUK,MACLC,IAAI,GAAI,iCACRC,SAAS,YACdN,MAAOI,MACFJ,MAAM,yBACNM,SAAS,cAElBC,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBC,YAAW,WACPC,MAAMC,KAAKC,UAAUL,EAAQ,KAAM,IACnCC,GAAc,KACf,OAGP,kBAAC,IAAD,KACI,kBAACxB,EAAD,CACIC,MAAM,qBACNO,KAAK,OACLqB,KAAK,OACLC,YAAY,yCACd,6BACF,kBAAC9B,EAAD,CACIC,MAAM,eACNO,KAAK,WACLqB,KAAK,WACLC,YAAY,mCACd,6BACF,kBAAC9B,EAAD,CACIC,MAAM,qBACNO,KAAK,MACLqB,KAAK,QACLC,YAAY,4CCzEjBC,MARf,WACI,OACI,8C,uBCiDOC,uBAzCf,WAAkB,IAAD,EACyBC,oBAAS,GADlC,mBACNC,EADM,KACOC,EADP,KAGb,OACI,yBACI1B,UAAW,eACX2B,MAAO,CAEHC,WAAW,OAAD,OAASC,IAAT,uCAGd,yBAAK7B,UAAU,eACTyB,EAAc,kBAAC,EAAD,MAAY,kBAAC,EAAD,MAC5B,yBAAKzB,UAAU,iBACX,yBACIA,UAAS,oBAAeyB,EAAc,aAAe,IACrDK,QAAS,WACLL,EACMM,QAAQC,IAAI,4BACZN,GAAe,KAGxBD,EAAc,eAAO,oDAE1B,yBACIzB,UAAS,oBAAgByB,EAA6B,GAAf,cACvCK,QAAS,WAELL,EACMC,GAAe,GACfK,QAAQC,IAAI,8BAGrBP,EAAc,6CAAY,uB,mBC7CnDQ,EAAOC,QAAU,IAA0B,yC","file":"static/js/4.1334e9fd.chunk.js","sourcesContent":["import React from 'react';\nimport { Formik, Form, useField } from 'formik';\nimport styled from '@emotion/styled';\nimport * as Yup from 'yup';\n\nfunction Login() {\n    const MyTextInput = ({ label, ...props }) => {\n        // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n        // which we can spread on <input> and also replace ErrorMessage entirely.\n        const [field, meta] = useField(props);\n        return (\n            <>\n                <label htmlFor={props.id || props.name}>{label}</label>\n                <input className=\"text-input\" {...field} {...props} />\n                {meta.touched && meta.error ? (\n                    <div className=\"error\">{meta.error}</div>\n                ) : null}\n            </>\n        );\n    };\n\n    const MyCheckbox = ({ children, ...props }) => {\n        // We need to tell useField what type of input this is\n        // since React treats radios and checkboxes differently\n        // than inputs/select/textarea.\n        const [field, meta] = useField({ ...props, type: 'checkbox' });\n        return (\n            <>\n                <label className=\"checkbox\">\n                    <input type=\"checkbox\" {...field} {...props} />\n                    {children}\n                </label>\n                {meta.touched && meta.error ? (\n                    <div className=\"error\">{meta.error}</div>\n                ) : null}\n            </>\n        );\n    };\n\n    return (\n        <Formik\n            initialValues={{\n                firstName: '',\n                lastName: '',\n                email: '',\n                acceptedTerms: false, // added for our checkbox\n                jobType: '', // added for our select\n            }}\n            validationSchema={Yup.object({\n                firstName: Yup.string()\n                    .max(15, 'Must be 15 characters or less')\n                    .required('Required'),\n                lastName: Yup.string()\n                    .max(20, 'Must be 20 characters or less')\n                    .required('Required'),\n                email: Yup.string()\n                    .email('Invalid email address')\n                    .required('Required'),\n            })}\n            onSubmit={(values, { setSubmitting }) => {\n                setTimeout(() => {\n                    alert(JSON.stringify(values, null, 2));\n                    setSubmitting(false);\n                }, 400);\n            }}\n        >\n            <Form>\n                <MyTextInput\n                    label=\"用户名\"\n                    name=\"name\"\n                    type=\"text\"\n                    placeholder=\"请输入用户名\"\n                /><br/>\n                <MyTextInput\n                    label=\"密码\"\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"请输入密码\"\n                /><br/>\n                <MyTextInput\n                    label=\"手机号\"\n                    name=\"tel\"\n                    type=\"phone\"\n                    placeholder=\"请输入手机号\"\n                />\n            </Form>\n        </Formik>\n    );\n}\n\nexport default Login;\n","import React from 'react';\n\nfunction Register() {\n    return (\n        <div>\n            注册\n        </div>\n    );\n}\n\nexport default Register;\n","import React, {useState} from 'react';\nimport { withRouter } from \"react-router\";\nimport Login from './login.jsx';\nimport Register from './register';\n\nimport bgImg from '../../assets/bgImg/LoginBgImg.jpg';\nimport bgImg2 from '../../assets/bgImg/LoginbgImg2.jpg';\nimport bgImg3 from '../../assets/bgImg/LoginBgImg3.jpg';\nimport bgImg4 from '../../assets/bgImg/LoginBgImg4.jpg';\nimport bgImg5 from '../../assets/bgImg/LoginBgImg5.jpg';\nimport './index.scss';\n\nfunction Index() {\n    const [isLoginPage, setIsLoginPage] = useState(true);\n\n    return (\n        <div\n            className={'LoginPageBox'}\n            style={{\n                // background: `url(${bgImg}) no-repeat, url(${bgImg3}) repeat`,\n                background: `url(${bgImg5}) center center / cover no-repeat`,\n            }}\n        >\n            <div className='formWrapBox'>\n                { isLoginPage ? <Login /> : <Register /> }\n                <div className='formBoxFooter'>\n                    <div\n                        className={`footerBtn ${isLoginPage ? 'currentBtn' : ''}`}\n                        onClick={() => {\n                            isLoginPage\n                                ? console.log('这就登录')\n                                : setIsLoginPage(true)\n                        }}\n                    >\n                        {isLoginPage ? '登录' : '已有账号，去登陆'}\n                    </div>\n                    <div\n                        className={`footerBtn ${!isLoginPage ? 'currentBtn' : ''}`}\n                        onClick={() => {\n                            // 看当前是登录还是注册\n                            isLoginPage\n                                ? setIsLoginPage(false)\n                                : console.log('这就注册')\n                        }}\n                    >\n                        {isLoginPage ? '无账号？去注册' : '注册'}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default withRouter(Index);\n","module.exports = __webpack_public_path__ + \"static/media/LoginBgImg5.d711419b.jpg\";"],"sourceRoot":""}